<!-- views/success.ejs -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>User Added to Group</title>
    <link rel="stylesheet" href="/stylesheets/style.css">
    <style>
        body {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            background-color: #2c3e50;
            color: white;
            text-align: center;
            font-family: Arial, sans-serif;
            overflow: hidden;
        }
        #fireworksCanvas {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 0;
        }
        .message {
            z-index: 1;
        }
    </style>
</head>
<body>
    <canvas id="fireworksCanvas"></canvas>
    <div class="message">
        <h1>User is added to the group successfully!</h1>
    </div>
    
    <script src="/javascripts/fireworks.js"></script>
    <script>
        // Initialize fireworks
        const canvas = document.getElementById('fireworksCanvas');
        const ctx = canvas.getContext('2d');
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;

        class Firework {
            constructor(x, y) {
                this.x = x;
                this.y = y;
                this.size = Math.random() * 2 + 1;
                this.color = `hsl(${Math.random() * 360}, 100%, 50%)`;
                this.velocity = {
                    x: (Math.random() - 0.5) * 5,
                    y: Math.random() * -5 - 1
                };
                this.gravity = 0.05;
            }

            draw() {
                ctx.beginPath();
                ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
                ctx.fillStyle = this.color;
                ctx.fill();
            }

            update() {
                this.x += this.velocity.x;
                this.y += this.velocity.y;
                this.velocity.y += this.gravity;
                this.size *= 0.98; // Shrink over time
            }
        }

        const fireworks = [];
        function createFirework() {
            const x = Math.random() * canvas.width;
            const y = Math.random() * canvas.height;
            fireworks.push(new Firework(x, y));
        }

        function animate() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            fireworks.forEach((firework, index) => {
                firework.update();
                firework.draw();
                if (firework.size <= 0.5) {
                    fireworks.splice(index, 1);
                }
            });
            requestAnimationFrame(animate);
        }

        setInterval(createFirework, 100);
        animate();
    </script>
</body>
</html>
